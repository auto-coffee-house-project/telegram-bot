from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from callback_data import SaleDeleteCallbackData
from models import Sale
from views import TextView

__all__ = (
    'SaleTemporaryCodeSuccessfullyAppliedView',
    'CodeSuccessfullyAppliedNotificationForClientView',
)


class SaleTemporaryCodeSuccessfullyAppliedView(TextView):

    def __init__(self, sale: Sale):
        self.__sale = sale

    def get_text(self) -> str:
        if self.__sale.is_free:
            return (
                '‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!'
                '\nüéâ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —á–∞—à–∫—É –∫–æ—Ñ–µ!'
            )
        return '‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!'

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                        callback_data=SaleDeleteCallbackData(
                            sale_id=self.__sale.id,
                        ).pack(),
                    ),
                ],
            ],
        )


class CodeSuccessfullyAppliedNotificationForClientView(TextView):

    def __init__(self, current_value: int, max_value: int):
        self.__current_value = current_value
        self.__max_value = max_value

    def get_text(self) -> str:
        if self.__max_value == self.__current_value:
            return (
                '‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n'
                'üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —á–∞—à–∫—É –∫–æ—Ñ–µ!'
            )
        left_value = self.__max_value - self.__current_value
        return (
            '‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n'
            'üî• –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ'
            f' –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –µ—â—ë {left_value} –ø–æ–∫—É–ø–æ–∫'
        )
